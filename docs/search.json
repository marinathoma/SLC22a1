[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SLC22a1",
    "section": "",
    "text": "Create Seurat + QC\nIn the following code we create a seurat object and do standard QC\n\nNumber of unique genes detected for each cell. Low-quality cells or empty droplets as well as cell doublets or multiplets will be filtered out.\nPecentage of mitochondrial genes: Dying cells have more mitochondrial genes.\nnFeature_RNA: number of genes or transcripts detected in each cell (normally anywhere between 500 and 5â€™000 genes per cell)\nnCount_RNA: total number of RNA molecules detected in each cell\n\n\n#- Data Filtering\nraw_data &lt;-read.table(\"raw_counts.txt\", sep=\"\\t\", row.names = 1, header=T)\n\n\n# Create a Seurat object\nseurat_obj &lt;- CreateSeuratObject(counts = raw_data, project = \"Mouse_SMCs\", min.cells = 3)\n\nprint(\"raw unfiltered data:\")\n\n[1] \"raw unfiltered data:\"\n\nseurat_obj\n\nAn object of class Seurat \n14587 features across 384 samples within 1 assay \nActive assay: RNA (14587 features, 0 variable features)\n 1 layer present: counts\n\nseurat_obj[[\"percent.mt\"]] &lt;- PercentageFeatureSet(seurat_obj, pattern = \"^mt\")\n\n#seurat_obj[[\"percent.mt\"]]\n\n# Visualize QC metrics as a violin plot\nVlnPlot(seurat_obj, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"), ncol = 3)\n\n\n\nplot1 &lt;- FeatureScatter(seurat_obj, feature1 = \"nCount_RNA\", feature2 = \"percent.mt\")\nplot2 &lt;- FeatureScatter(seurat_obj, feature1 = \"nCount_RNA\", feature2 = \"nFeature_RNA\")\nplot1\n\n\n\nplot2\n\n\n\n#filter the cells:\nseurat &lt;- subset(seurat_obj, subset = nFeature_RNA &gt; 200 & nFeature_RNA &lt; 4200 & percent.mt &lt; 10 & nCount_RNA &lt; 1000000 )\n\n\nprint(\"filtered data:\")\n\n[1] \"filtered data:\"\n\nseurat\n\nAn object of class Seurat \n14587 features across 297 samples within 1 assay \nActive assay: RNA (14587 features, 0 variable features)\n 1 layer present: counts\n\n\nNormalizing and identification of highly variable genes\n\nseurat &lt;- NormalizeData(seurat, normalization.method = \"LogNormalize\", scale.factor = 10000)\n\n\n#set the treshhold for nfeatures!\nseurat &lt;- FindVariableFeatures(seurat, selection.method = \"vst\", nfeatures = 2000)\ntop10 &lt;- head(VariableFeatures(seurat), 10)\n\n\nplot1 &lt;- VariableFeaturePlot(seurat)\nplot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE, xnudge = 0, ynudge = 0)\nplot1\n\n\n\nplot2\n\n\n\n#scaling the data so that the mean expression across all cells is 0\n\nall.genes &lt;- rownames(seurat)\nseurat &lt;- ScaleData(seurat, features = all.genes)\n\nPrincipal componant analysis (PCA)\n\nseurat &lt;- RunPCA(seurat, features = VariableFeatures(object = seurat))\n\nVizDimLoadings(seurat, dims = 1:2, reduction = \"pca\")\n#DimHeatmap(seurat, dims = 1, cells = 500, balanced = TRUE)\n\nCluster the cells\n\nseurat &lt;- FindNeighbors(seurat, dims = 1:10)\nseurat &lt;- FindClusters(seurat, reduction.type =\"pca\", resolution = 0.2)\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 297\nNumber of edges: 8022\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.9236\nNumber of communities: 3\nElapsed time: 0 seconds\n\numap &lt;- RunUMAP(seurat, dims = 1:10)\nDimPlot(umap, reduction = \"umap\", label = T, label.size = 7)\n\n\n\ntsne &lt;- RunTSNE(seurat, dims = 1:10)\nDimPlot(tsne, reduction = \"tsne\", label = T, label.size = 7)\n\n\n\n\n\nmarker_genes &lt;- c(\"Myh11\",\"Acta2\",\"Tagln\",\"Ddr2\",\"Cdh5\",\"Pecam1\",\"Cldn5\",\"Ptprc\",\"Prox1\",\"Col1a1\",\"Fap\",\"Thy1\",\"Pdgfra\",\"Pdgfrb\", \"Rgs5\", \"Vtn\", \"Cspg4\", \"Sema3a\")\n\ncont_markers &lt;- c(\"Pecam1\", \"Cdh5\", \"Pdpn\", \"Ptprc\")\n\ninterest_markers &lt;- c(\"Cspg4\", \"Ano1\", \"Sdc1\", \"Enpp2\", \"Dcn\", \"Slc22a3\", \"Slc22a1\")\n\nCC_markers &lt;- c(\"Itga1\", \"Itga5\", \"Itga7\", \"Cdh2\", \"Cdh11\", \"Nectin2\", \"Selp\", \"Sell\")\n\n\nFeaturePlot(tsne, features = marker_genes,\n            pt.size = 2,\n            cols = c(\"grey90\", \"red2\"),\n            ncol = 3, \n            combine = F)\n\n[[1]]\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\n\n[[8]]\n\n\n\n\n\n\n[[9]]\n\n\n\n\n\n\n[[10]]\n\n\n\n\n\n\n[[11]]\n\n\n\n\n\n\n[[12]]\n\n\n\n\n\n\n[[13]]\n\n\n\n\n\n\n[[14]]\n\n\n\n\n\n\n[[15]]\n\n\n\n\n\n\n[[16]]\n\n\n\n\n\n\n[[17]]\n\n\n\n\n\n\n[[18]]\n\n\n\n\n\n\nFeaturePlot(tsne, features = cont_markers,\n            pt.size = 2,\n            cols = c(\"grey90\", \"red2\"),\n            ncol = 3)\n\n\n\n\n\nFeaturePlot(tsne, features = interest_markers,\n            pt.size = 2,\n            cols = c(\"grey90\", \"red2\"),\n            ncol = 3)\n\n\n\n\n\nFeaturePlot(tsne, features = CC_markers,\n            pt.size = 2,\n            cols = c(\"grey90\", \"red2\"),\n            ncol = 3)\n\n\n\n\nDifferential expression\nViolin Plots\n\n#cluster1.markers &lt;- FindMarkers(SOF, ident.1 = 1, min.pct = 0.25)\n#head(cluster1.markers, n = 5)\n\nVlnPlot(seurat, features = c(interest_markers),  log= TRUE, combine = F)\n\n[[1]]\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n[[4]]\n\n\n\n\n\n\n[[5]]\n\n\n\n\n\n\n[[6]]\n\n\n\n\n\n\n[[7]]\n\n\n\n\n\nDotplot\n\nDotPlot(object = seurat, features = marker_genes) + \n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))\n\nWarning: Scaling data with a low number of groups may produce misleading\nresults"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Project aim: Characterize SMC around LECs isolated from mice\nProject lead: Olga Gkountidi\nAnalysis: Marina Thoma"
  }
]